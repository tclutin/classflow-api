basePath: /api/v1
definitions:
  auth.LogInRequest:
    properties:
      email:
        maxLength: 40
        type: string
      password:
        maxLength: 40
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.LogInWithTelegramRequest:
    properties:
      telegram_chat_id:
        minimum: 1
        type: integer
    required:
    - telegram_chat_id
    type: object
  auth.SignUpRequest:
    properties:
      email:
        maxLength: 40
        type: string
      password:
        maxLength: 40
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.SignUpWithTelegramRequest:
    properties:
      full_name:
        maxLength: 40
        type: string
      telegram_chat_id:
        minimum: 1
        type: integer
    required:
    - full_name
    - telegram_chat_id
    type: object
  auth.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth.UserDetailsResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      notifications_enabled:
        type: boolean
      password_hash:
        type: string
      role:
        type: string
      telegram:
        type: integer
      user_id:
        type: integer
    type: object
  response.APIError:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: AntonioKrasava
  title: ClassFlow API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access and refresh tokens
      parameters:
      - description: User login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LogInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIError'
      summary: Log in to the system
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: Register new account
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIError'
      summary: Register a new account
      tags:
      - auth
  /auth/telegram/login:
    post:
      consumes:
      - application/json
      description: Log in to an existing account using Telegram Chat ID
      parameters:
      - description: Log in using Telegram Chat ID
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LogInWithTelegramRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIError'
      summary: Log in with Telegram
      tags:
      - auth
  /auth/telegram/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account with Telegram Chat ID and Fullname
      parameters:
      - description: Register new account with Telegram
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.SignUpWithTelegramRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIError'
      summary: Register a new account with Telegram
      tags:
      - auth
  /auth/who:
    get:
      consumes:
      - application/json
      description: Get the details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserDetailsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIError'
      security:
      - BearerAuth: []
      summary: Get user details
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    description: Use "Bearer <token>" to authenticate
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
